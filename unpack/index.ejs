/// <reference path="index.d.ts" />
const systems = <%- JSON.stringify(systems) %>;
const domains = <%- JSON.stringify(domains).replace(/"getVersions:(.*?):(.*?)"/g, "async () => (await import(/* webpackChunkName: 'ethos.$1' */ './$1.js'))['$2']") %>;
const entities = {}

function sortVersions(a, b) {
    let [a1, a2, a3] = a.name.split('.').map(n => parseInt(n, 10))
    let [b1, b2, b3] = b.name.split('.').map(n => parseInt(n, 10))
    if (a1 - b1) return a1 - b1
    if (a2 - b2) return a2 - b2
    return a3 - b3
}

function crawl(list, parent) {
    for (const entry of list) {
        if (parent)
            entry.parent = parent
        if (entry.resource) {
            entities[entry.resource] = entry
            const load = entry.getVersions
            entry.getVersions = async () => {
                entry.versions = (await load()).sort(sortVersions)
                entry.versions.forEach(v => v.entity = entry)
                return entry.versions
            }
        } else {
            if (entry.subdomains)
                crawl(entry.subdomains, entry)
            if (entry.entities)
                crawl(entry.entities, entry)
            entry.contains = item => {
                if (entry.subdomains)
                    if (entry.subdomains.some(d => d.contains(item)))
                        return true
                if (entry.entities)
                    if (item.resource)
                        return entry === item.parent
                    else
                        return entry === item.entity.parent
                return false
            }
        }
    }
}
// @ts-ignore
crawl(domains)

exports.EthosData = { systems, domains, entities }